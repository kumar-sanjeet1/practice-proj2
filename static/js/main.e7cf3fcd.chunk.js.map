{"version":3,"sources":["logo.svg","components/header.component.jsx","components/list.component.jsx","anime.services.js","components/search.component.jsx","components/button.component.jsx","components/dashboard.component.jsx","App.js","serviceWorker.js","redux/anime.reducer.js","redux/store.js","index.js"],"names":["module","exports","Header","props","className","Animie","info","title","url","image_url","href","src","alt","connect","state","console","log","animes","map","ani","index","key","searchAnimie","query","page","update","fetch","then","res","json","data","results","handleSearch","e","updateSearch","target","value","dispatch","ownProps","updateAnime","type","payload","placeholder","onKeyDown","loadmoreResults","search","onClick","animies","length","App","Boolean","window","location","hostname","match","INITIAL_STATE","createStore","action","concat","applyMiddleware","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e7cf3fcd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\n\n\nexport const Header = (props) => (\n    <header>\n        <div className=\"logo\">\n            LOGO\n        </div>\n    </header>\n)","\nimport React from 'react';\nimport {connect } from 'react-redux'\n\nconst AnimieList = (props) => {\n    console.log('state.animes', props);\n    const { animes }  = props;\n    return (\n        <div className=\"anime-list\"> \n            {animes.map((ani,index) => (\n            <Animie key={index} info={ani} />\n        ))}\n        </div>\n    )\n}\n\nconst Animie = ({info}) => {\n    let { title, url, image_url} = info;\n    return (\n        <div className=\"anime\">\n            <a href={url}>\n                <img src={image_url} alt={title} />\n                <h4>{title}</h4>\n            </a>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    console.log('state here', state);\n    return {\n        animes: state.animes\n    }\n}\n\n\nexport default connect(mapStateToProps)(AnimieList);\n\n\n\n\n","\n\n\nexport const searchAnimie = (query, page, update) => {\n     fetch(`https://api.jikan.moe/v3/search/anime?q=${query}&limit=16&page=${page||1}`)\n         .then(res => res.json())\n         .then(data => {\n             console.log(data);\n             update(data.results)\n         })\n\n     console.log('do validate', page);\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { searchAnimie } from '../anime.services';\n\n\nconst SearchAnime = (props) => {\n    console.log('search', props);\n    const { page, updateAnime, updateSearch }  = props\n    return (\n        <div className=\"search-box\">\n            <input type=\"text\" placeholder='Search Anime Here' onKeyDown={e => {\n                handleSearch(e, updateAnime, page, updateSearch)\n            }} />\n        </div>\n    )\n}\n\nconst handleSearch = (e, update, page, updateSearch) => {\n    if (e.key === 'Enter') {\n        searchAnimie(e.target.value, page, update);\n        updateSearch(e.target.value);\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    console.log(ownProps);\n    return {\n        updateAnime: (animes) => dispatch({ type: 'UPDATE_AMIMES', payload: animes}),\n        updateSearch: (query) => dispatch({ type: 'UPDATE_SEARCH', payload: query })\n    }\n}\n\nconst mapStateToProps = ({page}) => ({\n    page\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchAnime)\n\n\n","import React from 'react';\nimport {connect } from 'react-redux';\nimport { searchAnimie } from '../anime.services';\n\n\n\nconst LoadMoreButton = (props) => (\n    <button className='load-more' onClick={e => {\n        loadmoreResults(props.search, props.updateAnime, props.updateSearch)\n    }}> Load more </button>\n)\n\nconst loadmoreResults = (search, updateAnime, updateSearch) => {\n    console.log('[age', search);\n    searchAnimie(search.query, search.page, updateAnime);\n    updateSearch(search.query);\n    \n}\n\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    console.log(ownProps);\n    return {\n        updateAnime: (animes) => dispatch({ type: 'UPDATE_AMIMES', payload: animes }),\n        updateSearch: (query) => dispatch({ type: 'UPDATE_SEARCH', payload: query })\n    }\n}\n\nconst mapStateToProps = ({ search }) => ({\n    search\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoadMoreButton)\n","\n\nimport React from 'react';\nimport AnimieList from './list.component';\nimport SearchAnime from './search.component';\nimport Button from './button.component'\nimport { connect } from 'react-redux';\n\nconst Dashboard = ({ animies}) => {\n    return (\n        <div className=\"dashboard\">\n            <SearchAnime />\n            <AnimieList />\n            {\n                animies.length ? <Button /> :null\n            }\n            \n        </div>\n    )\n}\n\n\nconst mapStateToProps = (state) => ({\n    animies: state.animes\n})\n\n\nexport default connect(mapStateToProps)(Dashboard)","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Header } from './components/header.component';\nimport Dashboard from './components/dashboard.component'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const INITIAL_STATE = {\n    animes: [],\n    search: {\n        query: '',\n        page: 1\n    }\n}\n\n\nexport default (state = INITIAL_STATE, action) => {\n    switch(action.type) {\n\n        case 'UPDATE_AMIMES':\n            return {\n                animes: state.animes.concat(action.payload),\n                search: state.search\n            }\n         case 'UPDATE_SEARCH':\n         return {\n             animes: state.animes,\n             search: {\n                 query: action.payload,\n                 page:  state.search.page + 1\n             }\n         }\n\n        default: \n            return state\n    }\n}\n","import  {createStore, applyMiddleware } from 'redux'\nimport { logger } from 'redux-logger'\nimport AnimeReducer from './anime.reducer';\n\nconst actions = [];\n\nif(process.env.NODE_ENV === 'development') {\n    actions.push(logger);\n}\n\nexport default createStore(AnimeReducer, applyMiddleware(...actions));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}